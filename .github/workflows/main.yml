name: Deploy

on:
  push:
    branches:
      - main

jobs:
  # isort:
  #   name: iSort Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.10"
  #     - uses: jamescurtin/isort-action@master
  #       with:
  #           requirementsFiles: "requirements.txt"
  nextjs-vercel: 
    name: Deploy Next.js to Vercel
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set environment variables in Vercel
        uses: dkershner6/vercel-set-env-action@v1
        with:
          token: ${{ secrets.VERCEL_TOKEN }}
          projectName: ${{secrets.VERCEL_PROJECT_NAME}} # project name in Vercel
          envVariableKeys: ENV_VAR1,ENV_VAR2
        env:
          ENV_VAR1: myEnvVar1
          TARGET_ENV_VAR1: production # comma delimited, one of [production, preview, development]
          TYPE_ENV_VAR1: encrypted # one of [plain, encrypted]
          ENV_VAR2: envVar2Value
          TARGET_ENV_VAR2: preview,development
          TYPE_ENV_VAR2: plain
      - name: deploy site to vercel      
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod' #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}} 
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}      
  flake8-lint:
    name: Flake8 Linting Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          max-line-length: "100"

  black-formatting:
    name: Black Formatting Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: black formatter
        uses: rickstaa/action-black@v1
        with:
          black_args: ". --check"

  build-docker:
    name: Builder Docker Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "epc-site-backend"
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          appdir: "backend" 
          stack: "container"
          # healthcheck: "https://epc-site-backend.herokuapp.com/ping"
          # delay: 20
          # rollbackonhealthcheckfailed: true
 